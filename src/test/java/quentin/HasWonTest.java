package quentin;

import static org.junit.jupiter.api.Assertions.*; // JUnit 5

import org.junit.jupiter.api.Test; // Test of JUnit 5

public class HasWonTest {

  @Test
  public void hasWonException() {
    Board board = new Board();
    assertThrows(
        RuntimeException.class,
        () -> board.hasWon(BoardPoint.EMPTY),
        "Not valid color for check the winner");
  }

  @Test
  public void findWhiteLine() {
    String[][] matrix = {
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {"W", "W", "W", "W", "W", "W", "W", "W", "W", "W", "W", "W", "W"},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."}
    };
    Board board = new Board(matrix);

    assertTrue(board.hasWon(BoardPoint.WHITE));
  }

  @Test
  public void findWhite2Lines() {
    String[][] matrix = {
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {"W", "W", "W", "W", "W", "W", "W", "W", "W", "W", "W", "W", "W"},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {"W", "W", "W", "W", "W", "W", "W", "W", "W", "W", "W", "W", "W"},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."}
    };
    Board board = new Board(matrix);
    for (int j = 0; j < 13; j++) {
      assertEquals(BoardPoint.WHITE, board.getValues(4, j));
      assertNotEquals(BoardPoint.WHITE, board.getValues(3, j));
      assertNotEquals(BoardPoint.WHITE, board.getValues(5, j));
    }
    assertEquals(BoardPoint.WHITE, board.getValues(4, 12));

    assertTrue(board.hasWon(BoardPoint.WHITE));
  }

  @Test
  public void findWhiteOrthogonalDownLines() {
    String[][] matrix1 = {
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {"W", "W", "W", "W", "W", "W", "W", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", "W", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", "W", "W", "W", "W", "W", "W", "W"},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."}
    };
    Board board1 = new Board(matrix1);
    assertTrue(board1.hasWon(BoardPoint.WHITE));
  }

  @Test
  public void findWhiteOrthogonalUpLines() {
    String[][] matrix1 = {
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", "W", "W", "W", "W", "W", "W", "W"},
      {".", ".", ".", ".", ".", ".", "W", ".", ".", ".", ".", ".", "."},
      {"W", "W", "W", "W", "W", "W", "W", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."}
    };
    Board board1 = new Board(matrix1);
    assertTrue(board1.hasWon(BoardPoint.WHITE));
  }

  @Test
  public void findWhiteLinesWithLoops() {
    String[][] matrix1 = {
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", "W", "W", "W", "W", "W", "W", "W"},
      {".", ".", ".", ".", ".", ".", "W", ".", "W", ".", ".", ".", "."},
      {"W", "W", "W", "W", "W", "W", "W", "W", "W", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."}
    };
    Board board1 = new Board(matrix1);
    assertTrue(board1.hasWon(BoardPoint.WHITE));
  }

  @Test
  public void findWhiteDifficultPath() {
    String[][] matrix1 = {
      {"W", "W", "W", "W", "W", "W", "W", "W", "W", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", "W", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", "W", "W", "W", "W", "W", "W", "."},
      {".", ".", ".", ".", ".", ".", "W", ".", "W", ".", ".", ".", "."},
      {"W", "W", "W", "W", "W", "W", "W", "W", "W", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", "W", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", "W", ".", ".", ".", "."},
      {".", "W", "W", "W", "W", "W", "W", "W", "W", ".", ".", ".", "."},
      {".", "W", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", "W", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", "W", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", "W", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", "W", "W", "W", "W", "W", "W", "W", "W", "W", "W", "W", "W"}
    };
    Board board1 = new Board(matrix1);
    assertTrue(board1.hasWon(BoardPoint.WHITE));
  }

  @Test
  public void notFindWhiteDiagonalPath1() {
    String[][] matrix1 = {
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {"W", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", "W", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "W", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", "W", "W", "W", "W", "W", "W", "W", "W", "W", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "W"},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."}
    };
    Board board1 = new Board(matrix1);
    assertFalse(board1.hasWon(BoardPoint.WHITE));
  }

  @Test
  public void notFindWhiteDiagonalPath2() {
    String[][] matrix1 = {
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {"W", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", "W", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "W", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", "W", ".", ".", "W", "W", "W", "W", "W", ".", "."},
      {".", ".", ".", ".", "W", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", "W", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", "W", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", "W", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", "W", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", "W", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "W", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "W", "W"}
    };
    Board board1 = new Board(matrix1);
    assertFalse(board1.hasWon(BoardPoint.WHITE));
  }

  @Test
  public void findWhitePathInNormalSituation() {
    String[][] matrix1 = {
      {"W", "W", "W", "W", "W", "W", "W", "W", "W", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", "W", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", "W", "W", "W", "W", "W", "W", "B"},
      {".", ".", ".", ".", "B", ".", "W", ".", "W", ".", ".", ".", "."},
      {"W", "W", "W", "W", "W", "W", "W", "W", "W", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", "W", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", ".", "W", ".", ".", ".", "."},
      {".", "W", "W", "W", "W", "W", "W", "W", "W", ".", "B", ".", "."},
      {".", "W", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", "W", ".", "B", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", "W", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", "."},
      {".", "W", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", "W", "W", "W", "W", "W", "W", "W", "W", "W", "W", "W", "W"}
    };
    Board board1 = new Board(matrix1);
    assertTrue(board1.hasWon(BoardPoint.WHITE));
  }

  public static void main(String[] args) {
    String[][] matrix = {
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."}
    };
    Board board = new Board(matrix);

    boolean result = board.hasWon(BoardPoint.BLACK);
    System.out.println("il risultato finale è " + result);
  }

  @Test
  public void findBlackLine() {
    String[][] matrix = {
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."}
    };
    Board board = new Board(matrix);

    assertTrue(board.hasWon(BoardPoint.BLACK));
    // assertTrue(board.hasWon(BoardPoint.WHITE));
  }

  @Test
  public void findBlack2Lines() {
    String[][] matrix = {
      {".", ".", "B", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."}
    };
    Board board = new Board(matrix);

    assertTrue(board.hasWon(BoardPoint.BLACK));
    // assertTrue(board.hasWon(BoardPoint.WHITE));
  }

  @Test
  public void findDarkOrthogonalLeftLines() {
    String[][] matrix = {
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", "B", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."}
    };
    Board board = new Board(matrix);

    assertTrue(board.hasWon(BoardPoint.BLACK));
  }

  @Test
  public void findDarkOrthogonalRightLines() {
    String[][] matrix = {
      {".", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", "B", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."}
    };
    Board board = new Board(matrix);

    assertTrue(board.hasWon(BoardPoint.BLACK));
    // assertTrue(board.hasWon(BoardPoint.WHITE));
  }

  @Test
  public void findDarkOrthogonalDifficultLines() {
    String[][] matrix = {
      {"B", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {"B", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {"B", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {"B", ".", "B", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {"B", ".", "B", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {"B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B"},
      {".", ".", ".", ".", "B", ".", ".", "B", ".", "B", ".", ".", "B"},
      {"B", ".", ".", ".", "B", ".", ".", "B", ".", "B", ".", ".", "B"},
      {"B", ".", ".", ".", ".", ".", ".", "B", "B", "B", ".", ".", "B"},
      {"B", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "B"},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "B"},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "B"},
      {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "B"}
    };
    Board board = new Board(matrix);
    assertTrue(board.hasWon(BoardPoint.BLACK));
  }

  @Test
  public void notFindDarkDiagonalPath1() {
    String[][] matrix = {
      {".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", "B", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", ".", "B", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", ".", "B", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", ".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
      {".", "B", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."}
    };
    Board board = new Board(matrix);

    // assertFalse(board.startBlack(0, 2));
    assertFalse(board.hasWon(BoardPoint.BLACK));
  }
}
