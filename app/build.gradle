/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.11.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'eclipse'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.jlink' version '2.26.0'
	id 'com.diffplug.spotless' version '7.0.0.BETA4'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
    implementation 'org.openjfx:javafx-controls:20'
    implementation 'org.openjfx:javafx-fxml:20'
    testImplementation 'org.testfx:testfx-core:4.0.16-alpha'
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'
    testImplementation 'org.testfx:openjfx-monocle:21.0.2'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

javafx {
    version = "17"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

application {
    mainModule = "quentin.app"
    mainClass = "quentin.Main"
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'quentin.app'
    }
}

test {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    systemProperty 'prism.order', 'sw'
    systemProperty 'prism.text', 't2k'
    systemProperty 'headless', 'true'
    systemProperty 'java.awt.headless', 'true'
    systemProperty 'testfx.robot', 'glass'
    systemProperty 'testfx.headless', 'true'
    systemProperty 'glass.platform', 'Monocle'
    systemProperty 'monocle.platform', 'Headless'
}

spotless {
  // optional: limit formatquentin-game enforcement to just the files changed by this feature branch
  ratchetFrom 'origin/main'

  format 'misc', {
    // define the files to apply `misc` to
    target '*.gradle', '.gitattributes', '.gitignore'

    // define the steps to apply to those files
    trimTrailingWhitespace()
    // leadingSpacesToTabs() // or leadingTabsToSpaces. Takes an integer argument if you don't like 4
    endWithNewline()
  }

  java {
    // don't need to set target, it is inferred from java

    // apply a specific flavor of google-java-format
    googleJavaFormat().aosp().reflowLongStrings().skipJavadocFormatting()
    // fix formatting of type annotations
    formatAnnotations()
    // make sure every file has the following copyright header.
    // optionally, Spotless can set copyright years by digging
    // through git history (see "license" section below)
    // licenseHeader '/* (C)$YEAR */'
  }

    jar {
        manifest {
            attributes(
                    'Main-Class': 'quentin.Main'
            )
        }
    }
}
run {
    standardInput = System.in
}

tasks.named('build') {
    dependsOn 'spotlessApply'
}

tasks.named('check') {
    dependsOn 'spotlessApply'
}
